package com.example.transportcompany.service;

import com.example.transportcompany.model.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.LocalDate;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

@Service
public class RevenueService {
    private final TransportationService transportationService;
    private final EmployeeService employeeService;
    private final TransportCompanyService transportCompanyService;
    @Autowired
    public RevenueService(TransportationService transportationService,
                                 EmployeeService employeeService, TransportCompanyService transportCompanyService) {
        this.transportationService = transportationService;
        this.employeeService = employeeService;
        this.transportCompanyService = transportCompanyService;
    }

    /**
     * Calculates the revenue generated from a specific transportation.
     *
     * @param transportation the transportation to calculate revenue for.
     * @return The revenue generated from the transportation.
     */
    public BigDecimal calculateRevenueOfTransportation(Transportation transportation) {
        TransportationRate companyRates =  transportation.getCompany().getTransportationRate();
        BigDecimal numberCustomers = BigDecimal.valueOf( getNumberOfCustomers(transportation) );
        BigDecimal totalLoadWeight = BigDecimal.valueOf(calculateTotalLoadWeight(transportation));
        BigDecimal loadRate = companyRates.getLoadRate();
        BigDecimal customerRate = companyRates.getCustomerRate();
        BigDecimal revenue = customerRate.multiply(numberCustomers).add(loadRate.multiply(totalLoadWeight));

        // Set the scale to 2 digits after the decimal point, round up if the decimal part is 5 or more
        return revenue.setScale(2, RoundingMode.HALF_UP);
    }
    /**
     * Calculates the total weight of loads in a transportation.
     *
     * @param transportation The transportation object.
     * @return The total weight of loads in the transportation.
     */
    public double calculateTotalLoadWeight(Transportation transportation){
        Set<Load> loads = transportation.getLoads();
        return loads.stream()
                .mapToDouble(Load::getWeight)
                .sum();
    }
    /**
     * Retrieves the number of customers associated with a transportation.
     *
     * @param transportation The transportation object.
     * @return The number of customers associated with the transportation.
     */
    public int getNumberOfCustomers(Transportation transportation){
        Set<Customer>customers = transportation.getCustomers();
        return customers.size();
    }

    /**
     * Retrieves the revenue generated by a company based on its transportations.
     *
     * @param companyId The ID of the company to calculate revenue for.
     * @return The total revenue generated by the company.
     */
    public BigDecimal getRevenueByCompany(long companyId) {
        List<Transportation> transportations = transportationService.findByCompany(companyId);
        return transportations.stream()
                .map(this::calculateRevenueOfTransportation)
                .reduce(BigDecimal.ZERO, BigDecimal::add);
    }
    /**
     * Retrieves the revenue generated by an employee based on their associated transportations.
     *
     * @param employeeId The ID of the employee to calculate revenue for.
     * @return The total revenue generated by the employee.
     */
    public BigDecimal getRevenueOfEmployee(long employeeId) {
        List<Transportation> transportations = transportationService.findByEmployee(employeeId);
        return transportations.stream()
                .map(this::calculateRevenueOfTransportation)
                .reduce(BigDecimal.ZERO, BigDecimal::add);
    }
    /**
     * Retrieves the revenue generated by each employee in a company.
     *
     * @param companyId The ID of the company to calculate revenue for its employees.
     * @return A mapping of each employee to their total revenue generated.
     */

    public HashMap<Employee, BigDecimal> getRevenueOfEachEmployee(long companyId) {
        List<Employee> employees = employeeService.filterByCompany(companyId);
        return employees.stream()
                .collect(Collectors.toMap(
                        employee -> employee,
                        employee -> getRevenueOfEmployee(employee.getId()),
                        (oldValue, newValue) -> newValue,
                        HashMap::new
                ));
    }

    /**
     * Retrieves the revenue generated by a company within a specific time period.
     *
     * @param companyId The ID of the company to calculate revenue for.
     * @param fromDate  The start date of the time period.
     * @param toDate    The end date of the time period.
     * @return The total revenue generated by the company within the specified time period.
     */
    public BigDecimal getRevenueByTimePeriod(long companyId, LocalDate fromDate, LocalDate toDate ) {
        List<Transportation> transportations = transportationService.findByPeriodAndCompany(companyId, fromDate, toDate);
        return transportations.stream()
                .map(this::calculateRevenueOfTransportation)
                .reduce(BigDecimal.ZERO, BigDecimal::add);
    }

    /**
     * Filters transport companies by revenue greater than the specified threshold.
     *
     * @param revenueThreshold The minimum revenue threshold for filtering companies.
     * @return A list of transport companies with revenue greater than the threshold.
     */
     public List<TransportCompany> filterByRevenueGreaterThan(BigDecimal revenueThreshold) {
        List<TransportCompany> companies = transportCompanyService.findAllCompanies();
        // Filter companies based on revenue greater than the threshold
        List<TransportCompany> filteredCompanies = companies.stream()
                .filter(company -> getRevenueByCompany(company.getId()).compareTo(revenueThreshold) > 0)
                .collect(Collectors.toList());

        return filteredCompanies;
    }
    /**
     * Sorts the list of transport companies by revenue .
     *
     * @return A list of transport companies sorted by revenue in descending order.
     */
     public List<TransportCompany> sortByRevenue() {
        List<TransportCompany> companies = transportCompanyService.findAllCompanies();

        // Sort companies based on calculated revenue
        companies.sort(Comparator.comparing(company -> getRevenueByCompany(((TransportCompany) company).getId())
        ).reversed());
        return companies;
    }


}
